import numpy as np
import pandas as pd
import yfinance as yf
from keras.models import Sequential
from keras.layers import LSTM, Dense, Dropout
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from keras.callbacks import EarlyStopping
import os

def download_stock_data(ticker='AAPL', period='5y', interval='1d'):
    df = yf.download(ticker, period=period, interval=interval)
    df.dropna(inplace=True)
    return df[['Close']]

def create_sequences(data, seq_len=60):
    x, y = [], []
    for i in range(seq_len, len(data)):
        x.append(data[i-seq_len:i])
        y.append(data[i])
    return np.array(x), np.array(y)

def build_lstm_model(input_shape):
    model = Sequential()
    model.add(LSTM(50, return_sequences=True, input_shape=input_shape))
    model.add(Dropout(0.2))
    model.add(LSTM(50))
    model.add(Dropout(0.2))
    model.add(Dense(1))  # Output: predicted closing price
    model.compile(optimizer='adam', loss='mean_squared_error')
    return model

def train_and_save_model(ticker='AAPL', model_path='models/lstm_model.h5'):
    df = download_stock_data(ticker)
    scaler = MinMaxScaler(feature_range=(0, 1))
    scaled_data = scaler.fit_transform(df.values)

    seq_len = 60
    x, y = create_sequences(scaled_data, seq_len)
    x = x.reshape((x.shape[0], x.shape[1], 1))

    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, shuffle=False)

    model = build_lstm_model((x_train.shape[1], 1))
    early_stop = EarlyStopping(monitor='val_loss', patience=5)
    model.fit(x_train, y_train, validation_data=(x_test, y_test),
              epochs=25, batch_size=32, callbacks=[early_stop])

    # Ensure model directory exists
    os.makedirs(os.path.dirname(model_path), exist_ok=True)
    model.save(model_path)

    print(f"âœ… Model saved to {model_path}")
    return model, scaler

if __name__ == "__main__":
    train_and_save_model()
